// Copyright 2019-2020 the donut authors. See AUTHORS.md

/*+---------------------------------------------------+
  |    _____        /--------------------------\\     |
  |   /     \\      |                            |    |
  | \\/\\/     |    /  file generated by         |    |
  |  |  (o)(o)    |                  donut tool  |    |
  |  C   .---_)   \\_   _________________________/    |
  |   | |.___|      | /                               |
  |   |  \\__/      <_/                               |
  |   /_____\\                                        |
  |  /_____/ \\                                       |
  | /         \\                                      |
  +---------------------------------------------------+
*/

#include "Scripting/Commands.h"

namespace Donut
{
static void Impl_HelloWorld()
{
	GameCommands::HelloWorld();
}
static void Impl_LoadP3DFile(const std::string& param0, const std::string& param1 = "")
{
	GameCommands::LoadP3DFile(param0, param1);
}
static void Impl_SetParticleTexture(int32_t param0, const std::string& param1)
{
	GameCommands::SetParticleTexture(param0, param1);
}
static void Impl_BindReward(const std::string& param0, const std::string& param1, const std::string& param2,
                            const std::string& param3, int32_t param4, int32_t param5 = 0, const std::string& param6 = "")
{
	GameCommands::BindReward(param0, param1, param2, param3, param4, param5, param6);
}
static void Impl_SetCarAttributes(const std::string& param0, float param1, float param2, float param3, float param4)
{
	GameCommands::SetCarAttributes(param0, param1, param2, param3, param4);
}
static void Impl_SetTotalGags(int32_t param0, int32_t param1)
{
	GameCommands::SetTotalGags(param0, param1);
}
static void Impl_SelectMission(const std::string& param0)
{
	GameCommands::SelectMission(param0);
}
static void Impl_SetMissionResetPlayerInCar(const std::string& param0)
{
	GameCommands::SetMissionResetPlayerInCar(param0);
}
static void Impl_SetDynaLoadData(const std::string& param0, const std::string& param1 = "")
{
	GameCommands::SetDynaLoadData(param0, param1);
}
static void Impl_UsePedGroup(int32_t param0)
{
	GameCommands::UsePedGroup(param0);
}
static void Impl_AddStage(const std::string& param0 = "", const std::string& param1 = "", const std::string& param2 = "")
{
	GameCommands::AddStage(param0, param1, param2);
}
static void Impl_SetPresentationBitmap(const std::string& param0)
{
	GameCommands::SetPresentationBitmap(param0);
}
static void Impl_SetStageMessageIndex(int32_t param0, const std::string& param1 = "")
{
	GameCommands::SetStageMessageIndex(param0, param1);
}
static void Impl_AddObjective(const std::string& param0, const std::string& param1 = "", const std::string& param2 = "")
{
	GameCommands::AddObjective(param0, param1, param2);
}
static void Impl_SetObjTargetVehicle(const std::string& param0)
{
	GameCommands::SetObjTargetVehicle(param0);
}
static void Impl_CloseObjective(int32_t param0 = 0)
{
	GameCommands::CloseObjective(param0);
}
static void Impl_CloseStage(int32_t param0 = 0)
{
	GameCommands::CloseStage(param0);
}
static void Impl_RESET_TO_HERE(int32_t param0 = 0)
{
	GameCommands::RESET_TO_HERE(param0);
}
static void Impl_SetHUDIcon(const std::string& param0)
{
	GameCommands::SetHUDIcon(param0);
}
static void Impl_AddCollectible(const std::string& param0, const std::string& param1 = "", const std::string& param2 = "",
                                const std::string& param3 = "")
{
	GameCommands::AddCollectible(param0, param1, param2, param3);
}
static void Impl_SetStageTime(int32_t param0)
{
	GameCommands::SetStageTime(param0);
}
static void Impl_AddCondition(const std::string& param0, const std::string& param1 = "")
{
	GameCommands::AddCondition(param0, param1);
}
static void Impl_CloseCondition(int32_t param0 = 0)
{
	GameCommands::CloseCondition(param0);
}
static void Impl_ShowStageComplete(int32_t param0 = 0)
{
	GameCommands::ShowStageComplete(param0);
}
static void Impl_AddNPC(const std::string& param0, const std::string& param1, const std::string& param2 = "")
{
	GameCommands::AddNPC(param0, param1, param2);
}
static void Impl_SetDestination(const std::string& param0, const std::string& param1 = "")
{
	GameCommands::SetDestination(param0, param1);
}
static void Impl_SetCollectibleEffect(const std::string& param0)
{
	GameCommands::SetCollectibleEffect(param0);
}
static void Impl_AddStageTime(int32_t param0)
{
	GameCommands::AddStageTime(param0);
}
static void Impl_AddObjectiveNPCWaypoint(const std::string& param0, const std::string& param1)
{
	GameCommands::AddObjectiveNPCWaypoint(param0, param1);
}
static void Impl_SetTalkToTarget(const std::string& param0, int32_t param1 = 0, float param2 = 0.0f,
                                 const std::string& param3 = "")
{
	GameCommands::SetTalkToTarget(param0, param1, param2, param3);
}
static void Impl_SetDialogueInfo(const std::string& param0, const std::string& param1, const std::string& param2,
                                 int32_t param3)
{
	GameCommands::SetDialogueInfo(param0, param1, param2, param3);
}
static void Impl_SetCamBestSide(const std::string& param0, const std::string& param1 = "")
{
	GameCommands::SetCamBestSide(param0, param1);
}
static void Impl_CloseMission(int32_t param0 = 0)
{
	GameCommands::CloseMission(param0);
}
static void Impl_PlacePlayerCar(const std::string& param0, const std::string& param1)
{
	GameCommands::PlacePlayerCar(param0, param1);
}
static void Impl_SetMaxTraffic(int32_t param0)
{
	GameCommands::SetMaxTraffic(param0);
}
static void Impl_AddStageVehicle(const std::string& param0, const std::string& param1, const std::string& param2,
                                 const std::string& param3, const std::string& param4 = "")
{
	GameCommands::AddStageVehicle(param0, param1, param2, param3, param4);
}
static void Impl_AddStageWaypoint(const std::string& param0)
{
	GameCommands::AddStageWaypoint(param0);
}
static void Impl_SetRaceLaps(int32_t param0)
{
	GameCommands::SetRaceLaps(param0);
}
static void Impl_SetDemoLoopTime(int64_t param0)
{
	GameCommands::SetDemoLoopTime(param0);
}
static void Impl_AddStageMusicChange(int32_t param0 = 0)
{
	GameCommands::AddStageMusicChange(param0);
}
static void Impl_LoadDisposableCar(const std::string& param0, const std::string& param1, const std::string& param2)
{
	GameCommands::LoadDisposableCar(param0, param1, param2);
}
static void Impl_AddMission(const std::string& param0)
{
	GameCommands::AddMission(param0);
}
static void Impl_ClearGagBindings(int32_t param0 = 0)
{
	GameCommands::ClearGagBindings(param0);
}
static void Impl_GagBegin(const std::string& param0)
{
	GameCommands::GagBegin(param0);
}
static void Impl_GagSetInterior(const std::string& param0)
{
	GameCommands::GagSetInterior(param0);
}
static void Impl_GagSetCycle(const std::string& param0)
{
	GameCommands::GagSetCycle(param0);
}
static void Impl_GagSetPosition(const std::string& param0)
{
	GameCommands::GagSetPosition(param0);
}
static void Impl_GagSetPosition(float param0, float param1, float param2)
{
	GameCommands::GagSetPosition(param0, param1, param2);
}
static void Impl_GagSetRandom(int32_t param0)
{
	GameCommands::GagSetRandom(param0);
}
static void Impl_GagSetSound(const std::string& param0)
{
	GameCommands::GagSetSound(param0);
}
static void Impl_GagSetTrigger(const std::string& param0, const std::string& param1, float param2)
{
	GameCommands::GagSetTrigger(param0, param1, param2);
}
static void Impl_GagSetTrigger(const std::string& param0, float param1, float param2, float param3, float param4)
{
	GameCommands::GagSetTrigger(param0, param1, param2, param3, param4);
}
static void Impl_GagEnd(int32_t param0 = 0)
{
	GameCommands::GagEnd(param0);
}
static void Impl_GagSetSparkle(int32_t param0)
{
	GameCommands::GagSetSparkle(param0);
}
static void Impl_GagSetPersist(int32_t param0)
{
	GameCommands::GagSetPersist(param0);
}
static void Impl_GagSetCoins(int32_t param0, float param1)
{
	GameCommands::GagSetCoins(param0, param1);
}
static void Impl_GagSetAnimCollision(int32_t param0)
{
	GameCommands::GagSetAnimCollision(param0);
}
static void Impl_GagSetIntro(int32_t param0)
{
	GameCommands::GagSetIntro(param0);
}
static void Impl_GagSetOutro(int32_t param0)
{
	GameCommands::GagSetOutro(param0);
}
static void Impl_GagSetCameraShake(float param0, int32_t param1, float param2)
{
	GameCommands::GagSetCameraShake(param0, param1, param2);
}
static void Impl_GagPlayFMV(const std::string& param0)
{
	GameCommands::GagPlayFMV(param0);
}
static void Impl_EnableTutorialMode(const std::string& param0)
{
	GameCommands::EnableTutorialMode(param0);
}
static void Impl_InitLevelPlayerVehicle(const std::string& param0, const std::string& param1, const std::string& param2,
                                        const std::string& param3 = "")
{
	GameCommands::InitLevelPlayerVehicle(param0, param1, param2, param3);
}
static void Impl_AddCharacter(const std::string& param0, const std::string& param1)
{
	GameCommands::AddCharacter(param0, param1);
}
static void Impl_CreateChaseManager(const std::string& param0, const std::string& param1, int32_t param2)
{
	GameCommands::CreateChaseManager(param0, param1, param2);
}
static void Impl_SetHitAndRunDecay(float param0)
{
	GameCommands::SetHitAndRunDecay(param0);
}
static void Impl_SetNumChaseCars(const std::string& param0)
{
	GameCommands::SetNumChaseCars(param0);
}
static void Impl_AddNPCCharacterBonusMission(const std::string& param0, const std::string& param1, const std::string& param2,
                                             const std::string& param3, const std::string& param4, const std::string& param5,
                                             int32_t param6, const std::string& param7 = "")
{
	GameCommands::AddNPCCharacterBonusMission(param0, param1, param2, param3, param4, param5, param6, param7);
}
static void Impl_AddBonusMissionNPCWaypoint(const std::string& param0, const std::string& param1)
{
	GameCommands::AddBonusMissionNPCWaypoint(param0, param1);
}
static void Impl_AddAmbientCharacter(const std::string& param0, const std::string& param1, float param2)
{
	GameCommands::AddAmbientCharacter(param0, param1, param2);
}
static void Impl_AddAmbientNPCWaypoint(const std::string& param0, const std::string& param1)
{
	GameCommands::AddAmbientNPCWaypoint(param0, param1);
}
static void Impl_AddPurchaseCarReward(const std::string& param0, const std::string& param1, const std::string& param2,
                                      const std::string& param3, float param4, const std::string& param5)
{
	GameCommands::AddPurchaseCarReward(param0, param1, param2, param3, param4, param5);
}
static void Impl_AddPurchaseCarNPCWaypoint(const std::string& param0, const std::string& param1)
{
	GameCommands::AddPurchaseCarNPCWaypoint(param0, param1);
}
static void Impl_CreateTrafficGroup(int32_t param0)
{
	GameCommands::CreateTrafficGroup(param0);
}
static void Impl_AddTrafficModel(const std::string& param0, int32_t param1, int32_t param2 = 0)
{
	GameCommands::AddTrafficModel(param0, param1, param2);
}
static void Impl_CloseTrafficGroup(int32_t param0 = 0)
{
	GameCommands::CloseTrafficGroup(param0);
}
static void Impl_CreatePedGroup(int32_t param0)
{
	GameCommands::CreatePedGroup(param0);
}
static void Impl_AddPed(const std::string& param0, int32_t param1)
{
	GameCommands::AddPed(param0, param1);
}
static void Impl_ClosePedGroup(int32_t param0 = 0)
{
	GameCommands::ClosePedGroup(param0);
}
static void Impl_PreallocateActors(const std::string& param0, const std::string& param1)
{
	GameCommands::PreallocateActors(param0, param1);
}
static void Impl_SetProjectileStats(const std::string& param0, const std::string& param1, const std::string& param2)
{
	GameCommands::SetProjectileStats(param0, param1, param2);
}
static void Impl_AddSpawnPointByLocatorScript(const std::string& param0, const std::string& param1, const std::string& param2,
                                              const std::string& param3, const std::string& param4, const std::string& param5)
{
	GameCommands::AddSpawnPointByLocatorScript(param0, param1, param2, param3, param4, param5);
}
static void Impl_AddBehaviour(const std::string& param0, const std::string& param1, const std::string& param2,
                              const std::string& param3 = "", const std::string& param4 = "", const std::string& param5 = "",
                              const std::string& param6 = "")
{
	GameCommands::AddBehaviour(param0, param1, param2, param3, param4, param5, param6);
}
static void Impl_SetActorRotationSpeed(const std::string& param0, const std::string& param1)
{
	GameCommands::SetActorRotationSpeed(param0, param1);
}
static void Impl_SetAnimatedCameraName(const std::string& param0)
{
	GameCommands::SetAnimatedCameraName(param0);
}
static void Impl_SetAnimCamMulticontName(const std::string& param0)
{
	GameCommands::SetAnimCamMulticontName(param0);
}
static void Impl_SetCoinFee(int32_t param0)
{
	GameCommands::SetCoinFee(param0);
}
static void Impl_PutMFPlayerInCar(int32_t param0 = 0)
{
	GameCommands::PutMFPlayerInCar(param0);
}
static void Impl_StartCountdown(const std::string& param0, const std::string& param1 = "")
{
	GameCommands::StartCountdown(param0, param1);
}
static void Impl_AddToCountdownSequence(const std::string& param0, int32_t param1)
{
	GameCommands::AddToCountdownSequence(param0, param1);
}
static void Impl_UseElapsedTime(int32_t param0 = 0)
{
	GameCommands::UseElapsedTime(param0);
}
static void Impl_SetRaceEnteryFee(int32_t param0)
{
	GameCommands::SetRaceEnteryFee(param0);
}
static void Impl_SetParTime(int32_t param0)
{
	GameCommands::SetParTime(param0);
}
static void Impl_SetCondMinHealth(float param0)
{
	GameCommands::SetCondMinHealth(param0);
}
static void Impl_SetCondTargetVehicle(const std::string& param0)
{
	GameCommands::SetCondTargetVehicle(param0);
}
static void Impl_SetCondTime(int32_t param0)
{
	GameCommands::SetCondTime(param0);
}
static void Impl_AddBonusMission(const std::string& param0)
{
	GameCommands::AddBonusMission(param0);
}
static void Impl_AddTeleportDest(const std::string& param0, float param1, float param2, float param3, const std::string& param4)
{
	GameCommands::AddTeleportDest(param0, param1, param2, param3, param4);
}
static void Impl_AddVehicleSelectInfo(const std::string& param0, const std::string& param1, const std::string& param2)
{
	GameCommands::AddVehicleSelectInfo(param0, param1, param2);
}
static void Impl_SuppressDriver(const std::string& param0)
{
	GameCommands::SuppressDriver(param0);
}
static void Impl_SetBonusMissionDialoguePos(const std::string& param0, const std::string& param1, const std::string& param2,
                                            const std::string& param3)
{
	GameCommands::SetBonusMissionDialoguePos(param0, param1, param2, param3);
}
static void Impl_SetConversationCam(int32_t param0, const std::string& param1, const std::string& param2 = "")
{
	GameCommands::SetConversationCam(param0, param1, param2);
}
static void Impl_ClearAmbientAnimations(const std::string& param0)
{
	GameCommands::ClearAmbientAnimations(param0);
}
static void Impl_AddAmbientNpcAnimation(const std::string& param0, const std::string& param1 = "")
{
	GameCommands::AddAmbientNpcAnimation(param0, param1);
}
static void Impl_AddAmbientPcAnimation(const std::string& param0, const std::string& param1 = "")
{
	GameCommands::AddAmbientPcAnimation(param0, param1);
}
static void Impl_SetCoinDrawable(const std::string& param0)
{
	GameCommands::SetCoinDrawable(param0);
}
static void Impl_AmbientAnimationRandomize(int32_t param0, int32_t param1)
{
	GameCommands::AmbientAnimationRandomize(param0, param1);
}
static void Impl_TurnGotoDialogOff(int32_t param0 = 0)
{
	GameCommands::TurnGotoDialogOff(param0);
}
static void Impl_SetCompletionDialog(const std::string& param0, const std::string& param1 = "")
{
	GameCommands::SetCompletionDialog(param0, param1);
}
static void Impl_SetMissionResetPlayerOutCar(const std::string& param0, const std::string& param1)
{
	GameCommands::SetMissionResetPlayerOutCar(param0, param1);
}
static void Impl_SetMissionStartCameraName(const std::string& param0)
{
	GameCommands::SetMissionStartCameraName(param0);
}
static void Impl_SetMissionStartMulticontName(const std::string& param0)
{
	GameCommands::SetMissionStartMulticontName(param0);
}
static void Impl_SetInitialWalk(const std::string& param0)
{
	GameCommands::SetInitialWalk(param0);
}
static void Impl_SetDialoguePositions(const std::string& param0, const std::string& param1, const std::string& param2,
                                      int32_t param3 = 0)
{
	GameCommands::SetDialoguePositions(param0, param1, param2, param3);
}
static void Impl_ActivateVehicle(const std::string& param0, const std::string& param1, const std::string& param2)
{
	GameCommands::ActivateVehicle(param0, param1, param2);
}
static void Impl_SetStageMusicAlwaysOn(int32_t param0 = 0)
{
	GameCommands::SetStageMusicAlwaysOn(param0);
}
static void Impl_SetNumValidFailureHints(int32_t param0)
{
	GameCommands::SetNumValidFailureHints(param0);
}
static void Impl_SetVehicleAIParams(const std::string& param0, int32_t param1, int32_t param2)
{
	GameCommands::SetVehicleAIParams(param0, param1, param2);
}
static void Impl_StageStartMusicEvent(const std::string& param0)
{
	GameCommands::StageStartMusicEvent(param0);
}
static void Impl_AllowMissionAbort(const std::string& param0)
{
	GameCommands::AllowMissionAbort(param0);
}
static void Impl_MustActionTrigger(int32_t param0 = 0)
{
	GameCommands::MustActionTrigger(param0);
}
static void Impl_SetStageAITargetCatchupParams(const std::string& param0, int32_t param1, int32_t param2)
{
	GameCommands::SetStageAITargetCatchupParams(param0, param1, param2);
}
static void Impl_SetFollowDistances(int32_t param0, int32_t param1)
{
	GameCommands::SetFollowDistances(param0, param1);
}
static void Impl_SetFadeOut(float param0)
{
	GameCommands::SetFadeOut(param0);
}
static void Impl_StayInBlack(int32_t param0 = 0)
{
	GameCommands::StayInBlack(param0);
}
static void Impl_AddStageCharacter(const std::string& param0, const std::string& param1, const std::string& param2,
                                   const std::string& param3, const std::string& param4)
{
	GameCommands::AddStageCharacter(param0, param1, param2, param3, param4);
}
static void Impl_SetDurationTime(float param0)
{
	GameCommands::SetDurationTime(param0);
}
static void Impl_SetFMVInfo(const std::string& param0, const std::string& param1 = "")
{
	GameCommands::SetFMVInfo(param0, param1);
}
static void Impl_SetForcedCar(int32_t param0 = 0)
{
	GameCommands::SetForcedCar(param0);
}
static void Impl_SwapInDefaultCar(int32_t param0 = 0)
{
	GameCommands::SwapInDefaultCar(param0);
}
static void Impl_SetSwapDefaultCarLocator(const std::string& param0)
{
	GameCommands::SetSwapDefaultCarLocator(param0);
}
static void Impl_SetSwapForcedCarLocator(const std::string& param0)
{
	GameCommands::SetSwapForcedCarLocator(param0);
}
static void Impl_SetSwapPlayerLocator(const std::string& param0)
{
	GameCommands::SetSwapPlayerLocator(param0);
}
static void Impl_StreetRacePropsLoad(const std::string& param0)
{
	GameCommands::StreetRacePropsLoad(param0);
}
static void Impl_StreetRacePropsUnload(const std::string& param0)
{
	GameCommands::StreetRacePropsUnload(param0);
}
static void Impl_SetStageAIRaceCatchupParams(const std::string& param0, int32_t param1, float param2, float param3,
                                             float param4)
{
	GameCommands::SetStageAIRaceCatchupParams(param0, param1, param2, param3, param4);
}
static void Impl_DisableHitAndRun(int32_t param0 = 0)
{
	GameCommands::DisableHitAndRun(param0);
}
static void Impl_NoTrafficForStage(int32_t param0 = 0)
{
	GameCommands::NoTrafficForStage(param0);
}
static void Impl_SetConditionPosition(int32_t param0)
{
	GameCommands::SetConditionPosition(param0);
}
static void Impl_AddSafeZone(const std::string& param0, int32_t param1)
{
	GameCommands::AddSafeZone(param0, param1);
}
static void Impl_AddGagBinding(const std::string& param0, const std::string& param1, const std::string& param2, int32_t param3,
                               const std::string& param4)
{
	GameCommands::AddGagBinding(param0, param1, param2, param3, param4);
}
static void Impl_SetPostLevelFMV(const std::string& param0)
{
	GameCommands::SetPostLevelFMV(param0);
}
static void Impl_SetHitNRun(int32_t param0 = 0)
{
	GameCommands::SetHitNRun(param0);
}
static void Impl_SetObjDistance(int32_t param0)
{
	GameCommands::SetObjDistance(param0);
}
static void Impl_SetMusicState(const std::string& param0, const std::string& param1)
{
	GameCommands::SetMusicState(param0, param1);
}
static void Impl_SetIrisWipe(float param0)
{
	GameCommands::SetIrisWipe(param0);
}
static void Impl_RemoveDriver(const std::string& param0)
{
	GameCommands::RemoveDriver(param0);
}
static void Impl_RemoveNPC(const std::string& param0)
{
	GameCommands::RemoveNPC(param0);
}
static void Impl_AddDriver(const std::string& param0, const std::string& param1)
{
	GameCommands::AddDriver(param0, param1);
}
static void Impl_SetCharacterToHide(const std::string& param0)
{
	GameCommands::SetCharacterToHide(param0);
}
static void Impl_SetLevelOver(int32_t param0 = 0)
{
	GameCommands::SetLevelOver(param0);
}
static void Impl_GagCheckCollCards(const std::string& param0, const std::string& param1, const std::string& param2,
                                   const std::string& param3, const std::string& param4)
{
	GameCommands::GagCheckCollCards(param0, param1, param2, param3, param4);
}
static void Impl_GagCheckMovie(const std::string& param0, const std::string& param1, const std::string& param2,
                               const std::string& param3)
{
	GameCommands::GagCheckMovie(param0, param1, param2, param3);
}
static void Impl_GagSetSoundLoadDistances(int32_t param0, int32_t param1)
{
	GameCommands::GagSetSoundLoadDistances(param0, param1);
}
static void Impl_BindCollectibleTo(int32_t param0, int32_t param1)
{
	GameCommands::BindCollectibleTo(param0, param1);
}
static void Impl_AddShield(const std::string& param0, const std::string& param1)
{
	GameCommands::AddShield(param0, param1);
}
static void Impl_SetStatepropShadow(const std::string& param0, const std::string& param1)
{
	GameCommands::SetStatepropShadow(param0, param1);
}
static void Impl_AddFlyingActorByLocator(const std::string& param0, const std::string& param1, const std::string& param2,
                                         const std::string& param3)
{
	GameCommands::AddFlyingActorByLocator(param0, param1, param2, param3);
}
static void Impl_AddCollectibleStateProp(const std::string& param0, const std::string& param1, int32_t param2)
{
	GameCommands::AddCollectibleStateProp(param0, param1, param2);
}
static void Impl_SetPickupTarget(const std::string& param0)
{
	GameCommands::SetPickupTarget(param0);
}
static void Impl_SetObjTargetBoss(const std::string& param0)
{
	GameCommands::SetObjTargetBoss(param0);
}
static void Impl_AllowRockOut(int32_t param0 = 0)
{
	GameCommands::AllowRockOut(param0);
}
static void Impl_ShowHUD(const std::string& param0)
{
	GameCommands::ShowHUD(param0);
}
static void Impl_SetGameOver(int32_t param0 = 0)
{
	GameCommands::SetGameOver(param0);
}
static void Impl_GoToPsScreenWhenDone(int32_t param0 = 0)
{
	GameCommands::GoToPsScreenWhenDone(param0);
}
static void Impl_SetMass(float param0)
{
	GameCommands::SetMass(param0);
}
static void Impl_SetGasScale(float param0)
{
	GameCommands::SetGasScale(param0);
}
static void Impl_SetSlipGasScale(float param0)
{
	GameCommands::SetSlipGasScale(param0);
}
static void Impl_SetBrakeScale(float param0)
{
	GameCommands::SetBrakeScale(param0);
}
static void Impl_SetTopSpeedKmh(float param0)
{
	GameCommands::SetTopSpeedKmh(param0);
}
static void Impl_SetMaxWheelTurnAngle(float param0)
{
	GameCommands::SetMaxWheelTurnAngle(param0);
}
static void Impl_SetHighSpeedSteeringDrop(float param0)
{
	GameCommands::SetHighSpeedSteeringDrop(param0);
}
static void Impl_SetTireGrip(float param0)
{
	GameCommands::SetTireGrip(param0);
}
static void Impl_SetNormalSteering(float param0)
{
	GameCommands::SetNormalSteering(param0);
}
static void Impl_SetSlipSteering(float param0)
{
	GameCommands::SetSlipSteering(param0);
}
static void Impl_SetEBrakeEffect(float param0)
{
	GameCommands::SetEBrakeEffect(param0);
}
static void Impl_SetSlipSteeringNoEBrake(float param0)
{
	GameCommands::SetSlipSteeringNoEBrake(param0);
}
static void Impl_SetSlipEffectNoEBrake(float param0)
{
	GameCommands::SetSlipEffectNoEBrake(param0);
}
static void Impl_SetCMOffsetX(float param0)
{
	GameCommands::SetCMOffsetX(param0);
}
static void Impl_SetCMOffsetY(float param0)
{
	GameCommands::SetCMOffsetY(param0);
}
static void Impl_SetCMOffsetZ(float param0)
{
	GameCommands::SetCMOffsetZ(param0);
}
static void Impl_SetSuspensionLimit(float param0)
{
	GameCommands::SetSuspensionLimit(param0);
}
static void Impl_SetSpringK(float param0)
{
	GameCommands::SetSpringK(param0);
}
static void Impl_SetDamperC(float param0)
{
	GameCommands::SetDamperC(param0);
}
static void Impl_SetSuspensionYOffset(float param0)
{
	GameCommands::SetSuspensionYOffset(param0);
}
static void Impl_SetHitPoints(float param0)
{
	GameCommands::SetHitPoints(param0);
}
static void Impl_SetBurnoutRange(float param0)
{
	GameCommands::SetBurnoutRange(param0);
}
static void Impl_SetMaxSpeedBurstTime(float param0)
{
	GameCommands::SetMaxSpeedBurstTime(param0);
}
static void Impl_SetDonutTorque(float param0)
{
	GameCommands::SetDonutTorque(param0);
}
static void Impl_SetWeebleOffset(float param0)
{
	GameCommands::SetWeebleOffset(param0);
}
static void Impl_SetWheelieRange(float param0)
{
	GameCommands::SetWheelieRange(param0);
}
static void Impl_SetWheelieOffsetY(float param0)
{
	GameCommands::SetWheelieOffsetY(param0);
}
static void Impl_SetWheelieOffsetZ(float param0)
{
	GameCommands::SetWheelieOffsetZ(param0);
}
static void Impl_SetShadowAdjustments(float param0, float param1, float param2, float param3, float param4, float param5,
                                      float param6, float param7)
{
	GameCommands::SetShadowAdjustments(param0, param1, param2, param3, param4, param5, param6, param7);
}
static void Impl_SetCharactersVisible(int32_t param0)
{
	GameCommands::SetCharactersVisible(param0);
}
static void Impl_SetIrisTransition(int32_t param0)
{
	GameCommands::SetIrisTransition(param0);
}
static void Impl_SetCharacterScale(float param0)
{
	GameCommands::SetCharacterScale(param0);
}
static void Impl_SetGamblingOdds(float param0)
{
	GameCommands::SetGamblingOdds(param0);
}
static void Impl_SetDriver(const std::string& param0)
{
	GameCommands::SetDriver(param0);
}
static void Impl_SetHasDoors(int32_t param0)
{
	GameCommands::SetHasDoors(param0);
}
static void Impl_SetShininess(float param0)
{
	GameCommands::SetShininess(param0);
}
static void Impl_SetHighRoof(int32_t param0)
{
	GameCommands::SetHighRoof(param0);
}
static void Impl_SetHighSpeedGasScale(float param0)
{
	GameCommands::SetHighSpeedGasScale(param0);
}
static void Impl_SetGasScaleSpeedThreshold(float param0)
{
	GameCommands::SetGasScaleSpeedThreshold(param0);
}
static void Impl_SetAllowSeatSlide(int32_t param0)
{
	GameCommands::SetAllowSeatSlide(param0);
}
static void Impl_ClearVehicleSelectInfo(const std::string& param0, const std::string& param1 = "",
                                        const std::string& param2 = "")
{
	GameCommands::ClearVehicleSelectInfo(param0, param1, param2);
}
static void Impl_AddFlyingActor(const std::string& param0, const std::string& param1, const std::string& param2,
                                const std::string& param3, const std::string& param4)
{
	GameCommands::AddFlyingActor(param0, param1, param2, param3, param4);
}
static void Impl_SetCollisionAttributes(const std::string& param0, const std::string& param1, const std::string& param2,
                                        const std::string& param3)
{
	GameCommands::SetCollisionAttributes(param0, param1, param2, param3);
}
static void Impl_AddSpawnPoint(const std::string& param0, const std::string& param1, const std::string& param2,
                               const std::string& param3, const std::string& param4, const std::string& param5,
                               const std::string& param6, const std::string& param7)
{
	GameCommands::AddSpawnPoint(param0, param1, param2, param3, param4, param5, param6, param7);
}
static void Impl_GagSetWeight(const std::string& param0)
{
	GameCommands::GagSetWeight(param0);
}
static void Impl_GagSetLoadDistances(const std::string& param0, const std::string& param1)
{
	GameCommands::GagSetLoadDistances(param0, param1);
}
static void Impl_SetTotalWasps(const std::string& param0, const std::string& param1)
{
	GameCommands::SetTotalWasps(param0, param1);
}
static void Impl_AddGlobalProp(const std::string& param0)
{
	GameCommands::AddGlobalProp(param0);
}
static void Impl_EnableHitAndRun(const std::string& param0 = "")
{
	GameCommands::EnableHitAndRun(param0);
}
static void Impl_SetHitAndRunMeter(const std::string& param0)
{
	GameCommands::SetHitAndRunMeter(param0);
}
static void Impl_SetChaseSpawnRate(const std::string& param0, const std::string& param1)
{
	GameCommands::SetChaseSpawnRate(param0, param1);
}
static void Impl_KillAllChaseAI(const std::string& param0)
{
	GameCommands::KillAllChaseAI(param0);
}
static void Impl_ResetHitAndRun(const std::string& param0 = "")
{
	GameCommands::ResetHitAndRun(param0);
}
static void Impl_SetHitAndRunDecayInterior(const std::string& param0)
{
	GameCommands::SetHitAndRunDecayInterior(param0);
}
static void Impl_SetMissionNameIndex(const std::string& param0)
{
	GameCommands::SetMissionNameIndex(param0);
}
static void Impl_AddBonusObjective(const std::string& param0, const std::string& param1 = "")
{
	GameCommands::AddBonusObjective(param0, param1);
}
static void Impl_AttachStatePropCollectible(const std::string& param0, const std::string& param1)
{
	GameCommands::AttachStatePropCollectible(param0, param1);
}
static void Impl_MoveStageVehicle(const std::string& param0, const std::string& param1, const std::string& param2)
{
	GameCommands::MoveStageVehicle(param0, param1, param2);
}
static void Impl_SetStageCamera(const std::string& param0, const std::string& param1, const std::string& param2)
{
	GameCommands::SetStageCamera(param0, param1, param2);
}
static void Impl_SetBonusMissionStart(const std::string& param0 = "")
{
	GameCommands::SetBonusMissionStart(param0);
}
static void Impl_PlacePlayerAtLocatorName(const std::string& param0)
{
	GameCommands::PlacePlayerAtLocatorName(param0);
}
static void Impl_msPlacePlayerCarAtLocatorName(const std::string& param0)
{
	GameCommands::msPlacePlayerCarAtLocatorName(param0);
}
static void Impl_ClearTrafficForStage(const std::string& param0 = "")
{
	GameCommands::ClearTrafficForStage(param0);
}
static void Impl_SetStageAIEvadeCatchupParams(const std::string& param0, const std::string& param1, const std::string& param2)
{
	GameCommands::SetStageAIEvadeCatchupParams(param0, param1, param2);
}
static void Impl_AllowUserDump(const std::string& param0 = "")
{
	GameCommands::AllowUserDump(param0);
}
static void Impl_SetVehicleToLoad(const std::string& param0, const std::string& param1, const std::string& param2)
{
	GameCommands::SetVehicleToLoad(param0, param1, param2);
}
static void Impl_SetConversationCamName(const std::string& param0)
{
	GameCommands::SetConversationCamName(param0);
}
static void Impl_SetConversationCamPcName(const std::string& param0)
{
	GameCommands::SetConversationCamPcName(param0);
}
static void Impl_SetConversationCamNpcName(const std::string& param0)
{
	GameCommands::SetConversationCamNpcName(param0);
}
static void Impl_SetConversationCamDistance(const std::string& param0, const std::string& param1)
{
	GameCommands::SetConversationCamDistance(param0, param1);
}
static void Impl_CharacterIsChild(const std::string& param0)
{
	GameCommands::CharacterIsChild(param0);
}
static void Impl_SetCarStartCamera(const std::string& param0)
{
	GameCommands::SetCarStartCamera(param0);
}
static void Impl_SetPlayerCarName(const std::string& param0, const std::string& param1)
{
	GameCommands::SetPlayerCarName(param0, param1);
}
static void Impl_SetRespawnRate(const std::string& param0, const std::string& param1)
{
	GameCommands::SetRespawnRate(param0, param1);
}
static void Impl_ActivateTrigger(const std::string& param0)
{
	GameCommands::ActivateTrigger(param0);
}
static void Impl_DeactivateTrigger(const std::string& param0)
{
	GameCommands::DeactivateTrigger(param0);
}
static void Impl_CreateAnimPhysObject(const std::string& param0, const std::string& param1)
{
	GameCommands::CreateAnimPhysObject(param0, param1);
}
static void Impl_CreateActionEventTrigger(const std::string& param0, const std::string& param1, const std::string& param2,
                                          const std::string& param3, const std::string& param4)
{
	GameCommands::CreateActionEventTrigger(param0, param1, param2, param3, param4);
}
static void Impl_LinkActionToObjectJoint(const std::string& param0, const std::string& param1, const std::string& param2,
                                         const std::string& param3, const std::string& param4)
{
	GameCommands::LinkActionToObjectJoint(param0, param1, param2, param3, param4);
}
static void Impl_LinkActionToObject(const std::string& param0, const std::string& param1, const std::string& param2,
                                    const std::string& param3, const std::string& param4)
{
	GameCommands::LinkActionToObject(param0, param1, param2, param3, param4);
}
static void Impl_SetCharacterPosition(const std::string& param0, const std::string& param1, const std::string& param2)
{
	GameCommands::SetCharacterPosition(param0, param1, param2);
}
static void Impl_ResetCharacter(const std::string& param0, const std::string& param1)
{
	GameCommands::ResetCharacter(param0, param1);
}

static bool Command_HelloWorld(const std::string& line)
{
	if (!line.empty())
		return false;

	Impl_HelloWorld();
	return true;
}

static bool Command_LoadP3DFile(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_LoadP3DFile(params[0], (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_SetParticleTexture(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetParticleTexture(param0, params[1]);
	return true;
}

static bool Command_BindReward(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 7))
		return false;

	size_t numParams = params.size();
	if (numParams < 5)
		return false;

	int32_t param4;
	if (!Commands::StringToInt(params[4], param4))
		return false;
	int32_t param5 = 0;
	if (numParams > 5)
		if (!Commands::StringToInt(params[5], param5))
			return false;

	Impl_BindReward(params[0], params[1], params[2], params[3], param4, param5, (numParams > 6) ? params[6] : "");
	return true;
}

static bool Command_SetCarAttributes(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	if (numParams < 5)
		return false;

	float param1;
	if (!Commands::StringToFloat(params[1], param1))
		return false;
	float param2;
	if (!Commands::StringToFloat(params[2], param2))
		return false;
	float param3;
	if (!Commands::StringToFloat(params[3], param3))
		return false;
	float param4;
	if (!Commands::StringToFloat(params[4], param4))
		return false;

	Impl_SetCarAttributes(params[0], param1, param2, param3, param4);
	return true;
}

static bool Command_SetTotalGags(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;
	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;

	Impl_SetTotalGags(param0, param1);
	return true;
}

static bool Command_SelectMission(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SelectMission(params[0]);
	return true;
}

static bool Command_SetMissionResetPlayerInCar(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetMissionResetPlayerInCar(params[0]);
	return true;
}

static bool Command_SetDynaLoadData(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetDynaLoadData(params[0], (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_UsePedGroup(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_UsePedGroup(param0);
	return true;
}

static bool Command_AddStage(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();

	Impl_AddStage((numParams > 0) ? params[0] : "", (numParams > 1) ? params[1] : "", (numParams > 2) ? params[2] : "");
	return true;
}

static bool Command_SetPresentationBitmap(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetPresentationBitmap(params[0]);
	return true;
}

static bool Command_SetStageMessageIndex(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetStageMessageIndex(param0, (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_AddObjective(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_AddObjective(params[0], (numParams > 1) ? params[1] : "", (numParams > 2) ? params[2] : "");
	return true;
}

static bool Command_SetObjTargetVehicle(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetObjTargetVehicle(params[0]);
	return true;
}

static bool Command_CloseObjective(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_CloseObjective(param0);
	return true;
}

static bool Command_CloseStage(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_CloseStage(param0);
	return true;
}

static bool Command_RESET_TO_HERE(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_RESET_TO_HERE(param0);
	return true;
}

static bool Command_SetHUDIcon(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetHUDIcon(params[0]);
	return true;
}

static bool Command_AddCollectible(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 4))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_AddCollectible(params[0], (numParams > 1) ? params[1] : "", (numParams > 2) ? params[2] : "",
	                    (numParams > 3) ? params[3] : "");
	return true;
}

static bool Command_SetStageTime(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetStageTime(param0);
	return true;
}

static bool Command_AddCondition(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_AddCondition(params[0], (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_CloseCondition(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_CloseCondition(param0);
	return true;
}

static bool Command_ShowStageComplete(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_ShowStageComplete(param0);
	return true;
}

static bool Command_AddNPC(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_AddNPC(params[0], params[1], (numParams > 2) ? params[2] : "");
	return true;
}

static bool Command_SetDestination(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetDestination(params[0], (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_SetCollectibleEffect(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetCollectibleEffect(params[0]);
	return true;
}

static bool Command_AddStageTime(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_AddStageTime(param0);
	return true;
}

static bool Command_AddObjectiveNPCWaypoint(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_AddObjectiveNPCWaypoint(params[0], params[1]);
	return true;
}

static bool Command_SetTalkToTarget(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 4))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param1 = 0;
	if (numParams > 1)
		if (!Commands::StringToInt(params[1], param1))
			return false;
	float param2 = 0.0f;
	if (numParams > 2)
		if (!Commands::StringToFloat(params[2], param2))
			return false;

	Impl_SetTalkToTarget(params[0], param1, param2, (numParams > 3) ? params[3] : "");
	return true;
}

static bool Command_SetDialogueInfo(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 4))
		return false;

	size_t numParams = params.size();
	if (numParams < 4)
		return false;

	int32_t param3;
	if (!Commands::StringToInt(params[3], param3))
		return false;

	Impl_SetDialogueInfo(params[0], params[1], params[2], param3);
	return true;
}

static bool Command_SetCamBestSide(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetCamBestSide(params[0], (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_CloseMission(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_CloseMission(param0);
	return true;
}

static bool Command_PlacePlayerCar(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_PlacePlayerCar(params[0], params[1]);
	return true;
}

static bool Command_SetMaxTraffic(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetMaxTraffic(param0);
	return true;
}

static bool Command_AddStageVehicle(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	if (numParams < 4)
		return false;

	Impl_AddStageVehicle(params[0], params[1], params[2], params[3], (numParams > 4) ? params[4] : "");
	return true;
}

static bool Command_AddStageWaypoint(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_AddStageWaypoint(params[0]);
	return true;
}

static bool Command_SetRaceLaps(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetRaceLaps(param0);
	return true;
}

static bool Command_SetDemoLoopTime(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int64_t param0;
	if (!Commands::StringToInt64(params[0], param0))
		return false;

	Impl_SetDemoLoopTime(param0);
	return true;
}

static bool Command_AddStageMusicChange(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_AddStageMusicChange(param0);
	return true;
}

static bool Command_LoadDisposableCar(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	Impl_LoadDisposableCar(params[0], params[1], params[2]);
	return true;
}

static bool Command_AddMission(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_AddMission(params[0]);
	return true;
}

static bool Command_ClearGagBindings(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_ClearGagBindings(param0);
	return true;
}

static bool Command_GagBegin(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_GagBegin(params[0]);
	return true;
}

static bool Command_GagSetInterior(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_GagSetInterior(params[0]);
	return true;
}

static bool Command_GagSetCycle(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_GagSetCycle(params[0]);
	return true;
}

static bool Command_GagSetPosition(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	switch (numParams)
	{
	case 1:
	{
		Impl_GagSetPosition(params[0]);
		return true;
	}
	case 3:
	{
		float param0;
		if (!Commands::StringToFloat(params[0], param0))
			return false;
		float param1;
		if (!Commands::StringToFloat(params[1], param1))
			return false;
		float param2;
		if (!Commands::StringToFloat(params[2], param2))
			return false;

		Impl_GagSetPosition(param0, param1, param2);
		return true;
	}
	}

	return false;
}

static bool Command_GagSetRandom(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_GagSetRandom(param0);
	return true;
}

static bool Command_GagSetSound(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_GagSetSound(params[0]);
	return true;
}

static bool Command_GagSetTrigger(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	switch (numParams)
	{
	case 3:
	{
		float param2;
		if (!Commands::StringToFloat(params[2], param2))
			return false;

		Impl_GagSetTrigger(params[0], params[1], param2);
		return true;
	}
	case 5:
	{
		float param1;
		if (!Commands::StringToFloat(params[1], param1))
			return false;
		float param2;
		if (!Commands::StringToFloat(params[2], param2))
			return false;
		float param3;
		if (!Commands::StringToFloat(params[3], param3))
			return false;
		float param4;
		if (!Commands::StringToFloat(params[4], param4))
			return false;

		Impl_GagSetTrigger(params[0], param1, param2, param3, param4);
		return true;
	}
	}

	return false;
}

static bool Command_GagEnd(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_GagEnd(param0);
	return true;
}

static bool Command_GagSetSparkle(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_GagSetSparkle(param0);
	return true;
}

static bool Command_GagSetPersist(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_GagSetPersist(param0);
	return true;
}

static bool Command_GagSetCoins(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;
	float param1;
	if (!Commands::StringToFloat(params[1], param1))
		return false;

	Impl_GagSetCoins(param0, param1);
	return true;
}

static bool Command_GagSetAnimCollision(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_GagSetAnimCollision(param0);
	return true;
}

static bool Command_GagSetIntro(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_GagSetIntro(param0);
	return true;
}

static bool Command_GagSetOutro(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_GagSetOutro(param0);
	return true;
}

static bool Command_GagSetCameraShake(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;
	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;
	float param2;
	if (!Commands::StringToFloat(params[2], param2))
		return false;

	Impl_GagSetCameraShake(param0, param1, param2);
	return true;
}

static bool Command_GagPlayFMV(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_GagPlayFMV(params[0]);
	return true;
}

static bool Command_EnableTutorialMode(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_EnableTutorialMode(params[0]);
	return true;
}

static bool Command_InitLevelPlayerVehicle(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 4))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	Impl_InitLevelPlayerVehicle(params[0], params[1], params[2], (numParams > 3) ? params[3] : "");
	return true;
}

static bool Command_AddCharacter(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_AddCharacter(params[0], params[1]);
	return true;
}

static bool Command_CreateChaseManager(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	int32_t param2;
	if (!Commands::StringToInt(params[2], param2))
		return false;

	Impl_CreateChaseManager(params[0], params[1], param2);
	return true;
}

static bool Command_SetHitAndRunDecay(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetHitAndRunDecay(param0);
	return true;
}

static bool Command_SetNumChaseCars(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetNumChaseCars(params[0]);
	return true;
}

static bool Command_AddNPCCharacterBonusMission(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 8))
		return false;

	size_t numParams = params.size();
	if (numParams < 7)
		return false;

	int32_t param6;
	if (!Commands::StringToInt(params[6], param6))
		return false;

	Impl_AddNPCCharacterBonusMission(params[0], params[1], params[2], params[3], params[4], params[5], param6,
	                                 (numParams > 7) ? params[7] : "");
	return true;
}

static bool Command_AddBonusMissionNPCWaypoint(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_AddBonusMissionNPCWaypoint(params[0], params[1]);
	return true;
}

static bool Command_AddAmbientCharacter(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	float param2;
	if (!Commands::StringToFloat(params[2], param2))
		return false;

	Impl_AddAmbientCharacter(params[0], params[1], param2);
	return true;
}

static bool Command_AddAmbientNPCWaypoint(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_AddAmbientNPCWaypoint(params[0], params[1]);
	return true;
}

static bool Command_AddPurchaseCarReward(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 6))
		return false;

	size_t numParams = params.size();
	if (numParams < 6)
		return false;

	float param4;
	if (!Commands::StringToFloat(params[4], param4))
		return false;

	Impl_AddPurchaseCarReward(params[0], params[1], params[2], params[3], param4, params[5]);
	return true;
}

static bool Command_AddPurchaseCarNPCWaypoint(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_AddPurchaseCarNPCWaypoint(params[0], params[1]);
	return true;
}

static bool Command_CreateTrafficGroup(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_CreateTrafficGroup(param0);
	return true;
}

static bool Command_AddTrafficModel(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;
	int32_t param2 = 0;
	if (numParams > 2)
		if (!Commands::StringToInt(params[2], param2))
			return false;

	Impl_AddTrafficModel(params[0], param1, param2);
	return true;
}

static bool Command_CloseTrafficGroup(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_CloseTrafficGroup(param0);
	return true;
}

static bool Command_CreatePedGroup(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_CreatePedGroup(param0);
	return true;
}

static bool Command_AddPed(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;

	Impl_AddPed(params[0], param1);
	return true;
}

static bool Command_ClosePedGroup(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_ClosePedGroup(param0);
	return true;
}

static bool Command_PreallocateActors(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_PreallocateActors(params[0], params[1]);
	return true;
}

static bool Command_SetProjectileStats(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	Impl_SetProjectileStats(params[0], params[1], params[2]);
	return true;
}

static bool Command_AddSpawnPointByLocatorScript(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 6))
		return false;

	size_t numParams = params.size();
	if (numParams < 6)
		return false;

	Impl_AddSpawnPointByLocatorScript(params[0], params[1], params[2], params[3], params[4], params[5]);
	return true;
}

static bool Command_AddBehaviour(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 7))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	Impl_AddBehaviour(params[0], params[1], params[2], (numParams > 3) ? params[3] : "", (numParams > 4) ? params[4] : "",
	                  (numParams > 5) ? params[5] : "", (numParams > 6) ? params[6] : "");
	return true;
}

static bool Command_SetActorRotationSpeed(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_SetActorRotationSpeed(params[0], params[1]);
	return true;
}

static bool Command_SetAnimatedCameraName(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetAnimatedCameraName(params[0]);
	return true;
}

static bool Command_SetAnimCamMulticontName(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetAnimCamMulticontName(params[0]);
	return true;
}

static bool Command_SetCoinFee(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetCoinFee(param0);
	return true;
}

static bool Command_PutMFPlayerInCar(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_PutMFPlayerInCar(param0);
	return true;
}

static bool Command_StartCountdown(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_StartCountdown(params[0], (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_AddToCountdownSequence(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;

	Impl_AddToCountdownSequence(params[0], param1);
	return true;
}

static bool Command_UseElapsedTime(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_UseElapsedTime(param0);
	return true;
}

static bool Command_SetRaceEnteryFee(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetRaceEnteryFee(param0);
	return true;
}

static bool Command_SetParTime(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetParTime(param0);
	return true;
}

static bool Command_SetCondMinHealth(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetCondMinHealth(param0);
	return true;
}

static bool Command_SetCondTargetVehicle(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetCondTargetVehicle(params[0]);
	return true;
}

static bool Command_SetCondTime(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetCondTime(param0);
	return true;
}

static bool Command_AddBonusMission(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_AddBonusMission(params[0]);
	return true;
}

static bool Command_AddTeleportDest(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	if (numParams < 5)
		return false;

	float param1;
	if (!Commands::StringToFloat(params[1], param1))
		return false;
	float param2;
	if (!Commands::StringToFloat(params[2], param2))
		return false;
	float param3;
	if (!Commands::StringToFloat(params[3], param3))
		return false;

	Impl_AddTeleportDest(params[0], param1, param2, param3, params[4]);
	return true;
}

static bool Command_AddVehicleSelectInfo(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	Impl_AddVehicleSelectInfo(params[0], params[1], params[2]);
	return true;
}

static bool Command_SuppressDriver(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SuppressDriver(params[0]);
	return true;
}

static bool Command_SetBonusMissionDialoguePos(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 4))
		return false;

	size_t numParams = params.size();
	if (numParams < 4)
		return false;

	Impl_SetBonusMissionDialoguePos(params[0], params[1], params[2], params[3]);
	return true;
}

static bool Command_SetConversationCam(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetConversationCam(param0, params[1], (numParams > 2) ? params[2] : "");
	return true;
}

static bool Command_ClearAmbientAnimations(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_ClearAmbientAnimations(params[0]);
	return true;
}

static bool Command_AddAmbientNpcAnimation(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_AddAmbientNpcAnimation(params[0], (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_AddAmbientPcAnimation(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_AddAmbientPcAnimation(params[0], (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_SetCoinDrawable(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetCoinDrawable(params[0]);
	return true;
}

static bool Command_AmbientAnimationRandomize(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;
	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;

	Impl_AmbientAnimationRandomize(param0, param1);
	return true;
}

static bool Command_TurnGotoDialogOff(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_TurnGotoDialogOff(param0);
	return true;
}

static bool Command_SetCompletionDialog(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetCompletionDialog(params[0], (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_SetMissionResetPlayerOutCar(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_SetMissionResetPlayerOutCar(params[0], params[1]);
	return true;
}

static bool Command_SetMissionStartCameraName(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetMissionStartCameraName(params[0]);
	return true;
}

static bool Command_SetMissionStartMulticontName(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetMissionStartMulticontName(params[0]);
	return true;
}

static bool Command_SetInitialWalk(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetInitialWalk(params[0]);
	return true;
}

static bool Command_SetDialoguePositions(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 4))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	int32_t param3 = 0;
	if (numParams > 3)
		if (!Commands::StringToInt(params[3], param3))
			return false;

	Impl_SetDialoguePositions(params[0], params[1], params[2], param3);
	return true;
}

static bool Command_ActivateVehicle(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	Impl_ActivateVehicle(params[0], params[1], params[2]);
	return true;
}

static bool Command_SetStageMusicAlwaysOn(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_SetStageMusicAlwaysOn(param0);
	return true;
}

static bool Command_SetNumValidFailureHints(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetNumValidFailureHints(param0);
	return true;
}

static bool Command_SetVehicleAIParams(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;
	int32_t param2;
	if (!Commands::StringToInt(params[2], param2))
		return false;

	Impl_SetVehicleAIParams(params[0], param1, param2);
	return true;
}

static bool Command_StageStartMusicEvent(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_StageStartMusicEvent(params[0]);
	return true;
}

static bool Command_AllowMissionAbort(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_AllowMissionAbort(params[0]);
	return true;
}

static bool Command_MustActionTrigger(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_MustActionTrigger(param0);
	return true;
}

static bool Command_SetStageAITargetCatchupParams(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;
	int32_t param2;
	if (!Commands::StringToInt(params[2], param2))
		return false;

	Impl_SetStageAITargetCatchupParams(params[0], param1, param2);
	return true;
}

static bool Command_SetFollowDistances(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;
	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;

	Impl_SetFollowDistances(param0, param1);
	return true;
}

static bool Command_SetFadeOut(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetFadeOut(param0);
	return true;
}

static bool Command_StayInBlack(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_StayInBlack(param0);
	return true;
}

static bool Command_AddStageCharacter(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	if (numParams < 5)
		return false;

	Impl_AddStageCharacter(params[0], params[1], params[2], params[3], params[4]);
	return true;
}

static bool Command_SetDurationTime(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetDurationTime(param0);
	return true;
}

static bool Command_SetFMVInfo(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetFMVInfo(params[0], (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_SetForcedCar(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_SetForcedCar(param0);
	return true;
}

static bool Command_SwapInDefaultCar(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_SwapInDefaultCar(param0);
	return true;
}

static bool Command_SetSwapDefaultCarLocator(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetSwapDefaultCarLocator(params[0]);
	return true;
}

static bool Command_SetSwapForcedCarLocator(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetSwapForcedCarLocator(params[0]);
	return true;
}

static bool Command_SetSwapPlayerLocator(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetSwapPlayerLocator(params[0]);
	return true;
}

static bool Command_StreetRacePropsLoad(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_StreetRacePropsLoad(params[0]);
	return true;
}

static bool Command_StreetRacePropsUnload(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_StreetRacePropsUnload(params[0]);
	return true;
}

static bool Command_SetStageAIRaceCatchupParams(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	if (numParams < 5)
		return false;

	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;
	float param2;
	if (!Commands::StringToFloat(params[2], param2))
		return false;
	float param3;
	if (!Commands::StringToFloat(params[3], param3))
		return false;
	float param4;
	if (!Commands::StringToFloat(params[4], param4))
		return false;

	Impl_SetStageAIRaceCatchupParams(params[0], param1, param2, param3, param4);
	return true;
}

static bool Command_DisableHitAndRun(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_DisableHitAndRun(param0);
	return true;
}

static bool Command_NoTrafficForStage(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_NoTrafficForStage(param0);
	return true;
}

static bool Command_SetConditionPosition(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetConditionPosition(param0);
	return true;
}

static bool Command_AddSafeZone(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;

	Impl_AddSafeZone(params[0], param1);
	return true;
}

static bool Command_AddGagBinding(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	if (numParams < 5)
		return false;

	int32_t param3;
	if (!Commands::StringToInt(params[3], param3))
		return false;

	Impl_AddGagBinding(params[0], params[1], params[2], param3, params[4]);
	return true;
}

static bool Command_SetPostLevelFMV(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetPostLevelFMV(params[0]);
	return true;
}

static bool Command_SetHitNRun(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_SetHitNRun(param0);
	return true;
}

static bool Command_SetObjDistance(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetObjDistance(param0);
	return true;
}

static bool Command_SetMusicState(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_SetMusicState(params[0], params[1]);
	return true;
}

static bool Command_SetIrisWipe(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetIrisWipe(param0);
	return true;
}

static bool Command_RemoveDriver(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_RemoveDriver(params[0]);
	return true;
}

static bool Command_RemoveNPC(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_RemoveNPC(params[0]);
	return true;
}

static bool Command_AddDriver(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_AddDriver(params[0], params[1]);
	return true;
}

static bool Command_SetCharacterToHide(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetCharacterToHide(params[0]);
	return true;
}

static bool Command_SetLevelOver(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_SetLevelOver(param0);
	return true;
}

static bool Command_GagCheckCollCards(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	if (numParams < 5)
		return false;

	Impl_GagCheckCollCards(params[0], params[1], params[2], params[3], params[4]);
	return true;
}

static bool Command_GagCheckMovie(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 4))
		return false;

	size_t numParams = params.size();
	if (numParams < 4)
		return false;

	Impl_GagCheckMovie(params[0], params[1], params[2], params[3]);
	return true;
}

static bool Command_GagSetSoundLoadDistances(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;
	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;

	Impl_GagSetSoundLoadDistances(param0, param1);
	return true;
}

static bool Command_BindCollectibleTo(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;
	int32_t param1;
	if (!Commands::StringToInt(params[1], param1))
		return false;

	Impl_BindCollectibleTo(param0, param1);
	return true;
}

static bool Command_AddShield(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_AddShield(params[0], params[1]);
	return true;
}

static bool Command_SetStatepropShadow(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_SetStatepropShadow(params[0], params[1]);
	return true;
}

static bool Command_AddFlyingActorByLocator(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 4))
		return false;

	size_t numParams = params.size();
	if (numParams < 4)
		return false;

	Impl_AddFlyingActorByLocator(params[0], params[1], params[2], params[3]);
	return true;
}

static bool Command_AddCollectibleStateProp(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	int32_t param2;
	if (!Commands::StringToInt(params[2], param2))
		return false;

	Impl_AddCollectibleStateProp(params[0], params[1], param2);
	return true;
}

static bool Command_SetPickupTarget(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetPickupTarget(params[0]);
	return true;
}

static bool Command_SetObjTargetBoss(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetObjTargetBoss(params[0]);
	return true;
}

static bool Command_AllowRockOut(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_AllowRockOut(param0);
	return true;
}

static bool Command_ShowHUD(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_ShowHUD(params[0]);
	return true;
}

static bool Command_SetGameOver(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_SetGameOver(param0);
	return true;
}

static bool Command_GoToPsScreenWhenDone(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	int32_t param0 = 0;
	if (numParams > 0)
		if (!Commands::StringToInt(params[0], param0))
			return false;

	Impl_GoToPsScreenWhenDone(param0);
	return true;
}

static bool Command_SetMass(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetMass(param0);
	return true;
}

static bool Command_SetGasScale(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetGasScale(param0);
	return true;
}

static bool Command_SetSlipGasScale(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetSlipGasScale(param0);
	return true;
}

static bool Command_SetBrakeScale(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetBrakeScale(param0);
	return true;
}

static bool Command_SetTopSpeedKmh(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetTopSpeedKmh(param0);
	return true;
}

static bool Command_SetMaxWheelTurnAngle(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetMaxWheelTurnAngle(param0);
	return true;
}

static bool Command_SetHighSpeedSteeringDrop(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetHighSpeedSteeringDrop(param0);
	return true;
}

static bool Command_SetTireGrip(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetTireGrip(param0);
	return true;
}

static bool Command_SetNormalSteering(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetNormalSteering(param0);
	return true;
}

static bool Command_SetSlipSteering(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetSlipSteering(param0);
	return true;
}

static bool Command_SetEBrakeEffect(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetEBrakeEffect(param0);
	return true;
}

static bool Command_SetSlipSteeringNoEBrake(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetSlipSteeringNoEBrake(param0);
	return true;
}

static bool Command_SetSlipEffectNoEBrake(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetSlipEffectNoEBrake(param0);
	return true;
}

static bool Command_SetCMOffsetX(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetCMOffsetX(param0);
	return true;
}

static bool Command_SetCMOffsetY(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetCMOffsetY(param0);
	return true;
}

static bool Command_SetCMOffsetZ(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetCMOffsetZ(param0);
	return true;
}

static bool Command_SetSuspensionLimit(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetSuspensionLimit(param0);
	return true;
}

static bool Command_SetSpringK(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetSpringK(param0);
	return true;
}

static bool Command_SetDamperC(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetDamperC(param0);
	return true;
}

static bool Command_SetSuspensionYOffset(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetSuspensionYOffset(param0);
	return true;
}

static bool Command_SetHitPoints(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetHitPoints(param0);
	return true;
}

static bool Command_SetBurnoutRange(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetBurnoutRange(param0);
	return true;
}

static bool Command_SetMaxSpeedBurstTime(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetMaxSpeedBurstTime(param0);
	return true;
}

static bool Command_SetDonutTorque(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetDonutTorque(param0);
	return true;
}

static bool Command_SetWeebleOffset(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetWeebleOffset(param0);
	return true;
}

static bool Command_SetWheelieRange(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetWheelieRange(param0);
	return true;
}

static bool Command_SetWheelieOffsetY(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetWheelieOffsetY(param0);
	return true;
}

static bool Command_SetWheelieOffsetZ(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetWheelieOffsetZ(param0);
	return true;
}

static bool Command_SetShadowAdjustments(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 8))
		return false;

	size_t numParams = params.size();
	if (numParams < 8)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;
	float param1;
	if (!Commands::StringToFloat(params[1], param1))
		return false;
	float param2;
	if (!Commands::StringToFloat(params[2], param2))
		return false;
	float param3;
	if (!Commands::StringToFloat(params[3], param3))
		return false;
	float param4;
	if (!Commands::StringToFloat(params[4], param4))
		return false;
	float param5;
	if (!Commands::StringToFloat(params[5], param5))
		return false;
	float param6;
	if (!Commands::StringToFloat(params[6], param6))
		return false;
	float param7;
	if (!Commands::StringToFloat(params[7], param7))
		return false;

	Impl_SetShadowAdjustments(param0, param1, param2, param3, param4, param5, param6, param7);
	return true;
}

static bool Command_SetCharactersVisible(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetCharactersVisible(param0);
	return true;
}

static bool Command_SetIrisTransition(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetIrisTransition(param0);
	return true;
}

static bool Command_SetCharacterScale(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetCharacterScale(param0);
	return true;
}

static bool Command_SetGamblingOdds(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetGamblingOdds(param0);
	return true;
}

static bool Command_SetDriver(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetDriver(params[0]);
	return true;
}

static bool Command_SetHasDoors(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetHasDoors(param0);
	return true;
}

static bool Command_SetShininess(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetShininess(param0);
	return true;
}

static bool Command_SetHighRoof(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetHighRoof(param0);
	return true;
}

static bool Command_SetHighSpeedGasScale(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetHighSpeedGasScale(param0);
	return true;
}

static bool Command_SetGasScaleSpeedThreshold(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	float param0;
	if (!Commands::StringToFloat(params[0], param0))
		return false;

	Impl_SetGasScaleSpeedThreshold(param0);
	return true;
}

static bool Command_SetAllowSeatSlide(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	int32_t param0;
	if (!Commands::StringToInt(params[0], param0))
		return false;

	Impl_SetAllowSeatSlide(param0);
	return true;
}

static bool Command_ClearVehicleSelectInfo(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_ClearVehicleSelectInfo(params[0], (numParams > 1) ? params[1] : "", (numParams > 2) ? params[2] : "");
	return true;
}

static bool Command_AddFlyingActor(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	if (numParams < 5)
		return false;

	Impl_AddFlyingActor(params[0], params[1], params[2], params[3], params[4]);
	return true;
}

static bool Command_SetCollisionAttributes(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 4))
		return false;

	size_t numParams = params.size();
	if (numParams < 4)
		return false;

	Impl_SetCollisionAttributes(params[0], params[1], params[2], params[3]);
	return true;
}

static bool Command_AddSpawnPoint(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 8))
		return false;

	size_t numParams = params.size();
	if (numParams < 8)
		return false;

	Impl_AddSpawnPoint(params[0], params[1], params[2], params[3], params[4], params[5], params[6], params[7]);
	return true;
}

static bool Command_GagSetWeight(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_GagSetWeight(params[0]);
	return true;
}

static bool Command_GagSetLoadDistances(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_GagSetLoadDistances(params[0], params[1]);
	return true;
}

static bool Command_SetTotalWasps(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_SetTotalWasps(params[0], params[1]);
	return true;
}

static bool Command_AddGlobalProp(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_AddGlobalProp(params[0]);
	return true;
}

static bool Command_EnableHitAndRun(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	Impl_EnableHitAndRun((numParams > 0) ? params[0] : "");
	return true;
}

static bool Command_SetHitAndRunMeter(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetHitAndRunMeter(params[0]);
	return true;
}

static bool Command_SetChaseSpawnRate(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_SetChaseSpawnRate(params[0], params[1]);
	return true;
}

static bool Command_KillAllChaseAI(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_KillAllChaseAI(params[0]);
	return true;
}

static bool Command_ResetHitAndRun(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	Impl_ResetHitAndRun((numParams > 0) ? params[0] : "");
	return true;
}

static bool Command_SetHitAndRunDecayInterior(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetHitAndRunDecayInterior(params[0]);
	return true;
}

static bool Command_SetMissionNameIndex(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetMissionNameIndex(params[0]);
	return true;
}

static bool Command_AddBonusObjective(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_AddBonusObjective(params[0], (numParams > 1) ? params[1] : "");
	return true;
}

static bool Command_AttachStatePropCollectible(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_AttachStatePropCollectible(params[0], params[1]);
	return true;
}

static bool Command_MoveStageVehicle(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	Impl_MoveStageVehicle(params[0], params[1], params[2]);
	return true;
}

static bool Command_SetStageCamera(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	Impl_SetStageCamera(params[0], params[1], params[2]);
	return true;
}

static bool Command_SetBonusMissionStart(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	Impl_SetBonusMissionStart((numParams > 0) ? params[0] : "");
	return true;
}

static bool Command_PlacePlayerAtLocatorName(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_PlacePlayerAtLocatorName(params[0]);
	return true;
}

static bool Command_msPlacePlayerCarAtLocatorName(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_msPlacePlayerCarAtLocatorName(params[0]);
	return true;
}

static bool Command_ClearTrafficForStage(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	Impl_ClearTrafficForStage((numParams > 0) ? params[0] : "");
	return true;
}

static bool Command_SetStageAIEvadeCatchupParams(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	Impl_SetStageAIEvadeCatchupParams(params[0], params[1], params[2]);
	return true;
}

static bool Command_AllowUserDump(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();

	Impl_AllowUserDump((numParams > 0) ? params[0] : "");
	return true;
}

static bool Command_SetVehicleToLoad(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	Impl_SetVehicleToLoad(params[0], params[1], params[2]);
	return true;
}

static bool Command_SetConversationCamName(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetConversationCamName(params[0]);
	return true;
}

static bool Command_SetConversationCamPcName(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetConversationCamPcName(params[0]);
	return true;
}

static bool Command_SetConversationCamNpcName(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetConversationCamNpcName(params[0]);
	return true;
}

static bool Command_SetConversationCamDistance(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_SetConversationCamDistance(params[0], params[1]);
	return true;
}

static bool Command_CharacterIsChild(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_CharacterIsChild(params[0]);
	return true;
}

static bool Command_SetCarStartCamera(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_SetCarStartCamera(params[0]);
	return true;
}

static bool Command_SetPlayerCarName(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_SetPlayerCarName(params[0], params[1]);
	return true;
}

static bool Command_SetRespawnRate(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_SetRespawnRate(params[0], params[1]);
	return true;
}

static bool Command_ActivateTrigger(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_ActivateTrigger(params[0]);
	return true;
}

static bool Command_DeactivateTrigger(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 1))
		return false;

	size_t numParams = params.size();
	if (numParams < 1)
		return false;

	Impl_DeactivateTrigger(params[0]);
	return true;
}

static bool Command_CreateAnimPhysObject(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_CreateAnimPhysObject(params[0], params[1]);
	return true;
}

static bool Command_CreateActionEventTrigger(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	if (numParams < 5)
		return false;

	Impl_CreateActionEventTrigger(params[0], params[1], params[2], params[3], params[4]);
	return true;
}

static bool Command_LinkActionToObjectJoint(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	if (numParams < 5)
		return false;

	Impl_LinkActionToObjectJoint(params[0], params[1], params[2], params[3], params[4]);
	return true;
}

static bool Command_LinkActionToObject(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 5))
		return false;

	size_t numParams = params.size();
	if (numParams < 5)
		return false;

	Impl_LinkActionToObject(params[0], params[1], params[2], params[3], params[4]);
	return true;
}

static bool Command_SetCharacterPosition(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 3))
		return false;

	size_t numParams = params.size();
	if (numParams < 3)
		return false;

	Impl_SetCharacterPosition(params[0], params[1], params[2]);
	return true;
}

static bool Command_ResetCharacter(const std::string& line)
{
	std::vector<std::string> params;
	if (!Commands::SplitParams(line, params, 2))
		return false;

	size_t numParams = params.size();
	if (numParams < 2)
		return false;

	Impl_ResetCharacter(params[0], params[1]);
	return true;
}

std::unordered_map<std::string, Command> Commands::_namedCommands = {
    {"HelloWorld", Command {&Command_HelloWorld, "hellooooooooooo new york!!!!"}},
    {"LoadP3DFile", Command {&Command_LoadP3DFile, "None", {{ParamType::String, ParamType::String}}}},
    {"SetParticleTexture", Command {&Command_SetParticleTexture, "None", {{ParamType::Int, ParamType::String}}}},
    {"BindReward", Command {&Command_BindReward,
                            "None",
                            {{ParamType::String, ParamType::String, ParamType::String, ParamType::String, ParamType::Int,
                              ParamType::Int, ParamType::String}}}},
    {"SetCarAttributes",
     Command {&Command_SetCarAttributes,
              "None",
              {{ParamType::String, ParamType::Float, ParamType::Float, ParamType::Float, ParamType::Float}}}},
    {"SetTotalGags", Command {&Command_SetTotalGags, "None", {{ParamType::Int, ParamType::Int}}}},
    {"SelectMission", Command {&Command_SelectMission, "None", {{ParamType::String}}}},
    {"SetMissionResetPlayerInCar", Command {&Command_SetMissionResetPlayerInCar, "None", {{ParamType::String}}}},
    {"SetDynaLoadData", Command {&Command_SetDynaLoadData, "None", {{ParamType::String, ParamType::String}}}},
    {"UsePedGroup", Command {&Command_UsePedGroup, "None", {{ParamType::Int}}}},
    {"AddStage", Command {&Command_AddStage, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetPresentationBitmap", Command {&Command_SetPresentationBitmap, "None", {{ParamType::String}}}},
    {"SetStageMessageIndex", Command {&Command_SetStageMessageIndex, "None", {{ParamType::Int, ParamType::String}}}},
    {"AddObjective", Command {&Command_AddObjective, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetObjTargetVehicle", Command {&Command_SetObjTargetVehicle, "None", {{ParamType::String}}}},
    {"CloseObjective", Command {&Command_CloseObjective, "None", {{ParamType::Int}}}},
    {"CloseStage", Command {&Command_CloseStage, "None", {{ParamType::Int}}}},
    {"RESET_TO_HERE", Command {&Command_RESET_TO_HERE, "None", {{ParamType::Int}}}},
    {"SetHUDIcon", Command {&Command_SetHUDIcon, "None", {{ParamType::String}}}},
    {"AddCollectible",
     Command {&Command_AddCollectible, "None", {{ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetStageTime", Command {&Command_SetStageTime, "None", {{ParamType::Int}}}},
    {"AddCondition", Command {&Command_AddCondition, "None", {{ParamType::String, ParamType::String}}}},
    {"CloseCondition", Command {&Command_CloseCondition, "None", {{ParamType::Int}}}},
    {"ShowStageComplete", Command {&Command_ShowStageComplete, "None", {{ParamType::Int}}}},
    {"AddNPC", Command {&Command_AddNPC, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetDestination", Command {&Command_SetDestination, "None", {{ParamType::String, ParamType::String}}}},
    {"SetCollectibleEffect", Command {&Command_SetCollectibleEffect, "None", {{ParamType::String}}}},
    {"AddStageTime", Command {&Command_AddStageTime, "None", {{ParamType::Int}}}},
    {"AddObjectiveNPCWaypoint", Command {&Command_AddObjectiveNPCWaypoint, "None", {{ParamType::String, ParamType::String}}}},
    {"SetTalkToTarget",
     Command {&Command_SetTalkToTarget, "None", {{ParamType::String, ParamType::Int, ParamType::Float, ParamType::String}}}},
    {"SetDialogueInfo",
     Command {&Command_SetDialogueInfo, "None", {{ParamType::String, ParamType::String, ParamType::String, ParamType::Int}}}},
    {"SetCamBestSide", Command {&Command_SetCamBestSide, "None", {{ParamType::String, ParamType::String}}}},
    {"CloseMission", Command {&Command_CloseMission, "None", {{ParamType::Int}}}},
    {"PlacePlayerCar", Command {&Command_PlacePlayerCar, "None", {{ParamType::String, ParamType::String}}}},
    {"SetMaxTraffic", Command {&Command_SetMaxTraffic, "None", {{ParamType::Int}}}},
    {"AddStageVehicle",
     Command {&Command_AddStageVehicle,
              "None",
              {{ParamType::String, ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"AddStageWaypoint", Command {&Command_AddStageWaypoint, "None", {{ParamType::String}}}},
    {"SetRaceLaps", Command {&Command_SetRaceLaps, "None", {{ParamType::Int}}}},
    {"SetDemoLoopTime", Command {&Command_SetDemoLoopTime, "None", {{ParamType::Int64}}}},
    {"AddStageMusicChange", Command {&Command_AddStageMusicChange, "None", {{ParamType::Int}}}},
    {"LoadDisposableCar",
     Command {&Command_LoadDisposableCar, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"AddMission", Command {&Command_AddMission, "None", {{ParamType::String}}}},
    {"ClearGagBindings", Command {&Command_ClearGagBindings, "ClearGagBindings();", {{ParamType::Int}}}},
    {"GagBegin", Command {&Command_GagBegin, "None", {{ParamType::String}}}},
    {"GagSetInterior", Command {&Command_GagSetInterior, "None", {{ParamType::String}}}},
    {"GagSetCycle", Command {&Command_GagSetCycle, "None", {{ParamType::String}}}},
    {"GagSetPosition",
     Command {&Command_GagSetPosition, "None", {{ParamType::String}, {ParamType::Float, ParamType::Float, ParamType::Float}}}},
    {"GagSetRandom", Command {&Command_GagSetRandom, "None", {{ParamType::Int}}}},
    {"GagSetSound", Command {&Command_GagSetSound, "None", {{ParamType::String}}}},
    {"GagSetTrigger", Command {&Command_GagSetTrigger,
                               "None",
                               {{ParamType::String, ParamType::String, ParamType::Float},
                                {ParamType::String, ParamType::Float, ParamType::Float, ParamType::Float, ParamType::Float}}}},
    {"GagEnd", Command {&Command_GagEnd, "None", {{ParamType::Int}}}},
    {"GagSetSparkle", Command {&Command_GagSetSparkle, "None", {{ParamType::Int}}}},
    {"GagSetPersist", Command {&Command_GagSetPersist, "None", {{ParamType::Int}}}},
    {"GagSetCoins", Command {&Command_GagSetCoins, "None", {{ParamType::Int, ParamType::Float}}}},
    {"GagSetAnimCollision", Command {&Command_GagSetAnimCollision, "None", {{ParamType::Int}}}},
    {"GagSetIntro", Command {&Command_GagSetIntro, "None", {{ParamType::Int}}}},
    {"GagSetOutro", Command {&Command_GagSetOutro, "None", {{ParamType::Int}}}},
    {"GagSetCameraShake", Command {&Command_GagSetCameraShake, "None", {{ParamType::Float, ParamType::Int, ParamType::Float}}}},
    {"GagPlayFMV", Command {&Command_GagPlayFMV, "Play FMV specified by file name", {{ParamType::String}}}},
    {"EnableTutorialMode", Command {&Command_EnableTutorialMode, "None", {{ParamType::String}}}},
    {"InitLevelPlayerVehicle", Command {&Command_InitLevelPlayerVehicle,
                                        "None",
                                        {{ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"AddCharacter", Command {&Command_AddCharacter, "None", {{ParamType::String, ParamType::String}}}},
    {"CreateChaseManager",
     Command {&Command_CreateChaseManager, "None", {{ParamType::String, ParamType::String, ParamType::Int}}}},
    {"SetHitAndRunDecay", Command {&Command_SetHitAndRunDecay, "None", {{ParamType::Float}}}},
    {"SetNumChaseCars", Command {&Command_SetNumChaseCars, "None", {{ParamType::String}}}},
    {"AddNPCCharacterBonusMission", Command {&Command_AddNPCCharacterBonusMission,
                                             "None",
                                             {{ParamType::String, ParamType::String, ParamType::String, ParamType::String,
                                               ParamType::String, ParamType::String, ParamType::Int, ParamType::String}}}},
    {"AddBonusMissionNPCWaypoint",
     Command {&Command_AddBonusMissionNPCWaypoint, "None", {{ParamType::String, ParamType::String}}}},
    {"AddAmbientCharacter",
     Command {&Command_AddAmbientCharacter, "None", {{ParamType::String, ParamType::String, ParamType::Float}}}},
    {"AddAmbientNPCWaypoint", Command {&Command_AddAmbientNPCWaypoint, "None", {{ParamType::String, ParamType::String}}}},
    {"AddPurchaseCarReward", Command {&Command_AddPurchaseCarReward,
                                      "None",
                                      {{ParamType::String, ParamType::String, ParamType::String, ParamType::String,
                                        ParamType::Float, ParamType::String}}}},
    {"AddPurchaseCarNPCWaypoint",
     Command {&Command_AddPurchaseCarNPCWaypoint, "None", {{ParamType::String, ParamType::String}}}},
    {"CreateTrafficGroup", Command {&Command_CreateTrafficGroup, "None", {{ParamType::Int}}}},
    {"AddTrafficModel", Command {&Command_AddTrafficModel, "None", {{ParamType::String, ParamType::Int, ParamType::Int}}}},
    {"CloseTrafficGroup", Command {&Command_CloseTrafficGroup, "None", {{ParamType::Int}}}},
    {"CreatePedGroup", Command {&Command_CreatePedGroup, "None", {{ParamType::Int}}}},
    {"AddPed", Command {&Command_AddPed, "None", {{ParamType::String, ParamType::Int}}}},
    {"ClosePedGroup", Command {&Command_ClosePedGroup, "None", {{ParamType::Int}}}},
    {"PreallocateActors", Command {&Command_PreallocateActors, "None", {{ParamType::String, ParamType::String}}}},
    {"SetProjectileStats",
     Command {&Command_SetProjectileStats, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"AddSpawnPointByLocatorScript", Command {&Command_AddSpawnPointByLocatorScript,
                                              "None",
                                              {{ParamType::String, ParamType::String, ParamType::String, ParamType::String,
                                                ParamType::String, ParamType::String}}}},
    {"AddBehaviour", Command {&Command_AddBehaviour,
                              "None",
                              {{ParamType::String, ParamType::String, ParamType::String, ParamType::String, ParamType::String,
                                ParamType::String, ParamType::String}}}},
    {"SetActorRotationSpeed", Command {&Command_SetActorRotationSpeed, "None", {{ParamType::String, ParamType::String}}}},
    {"SetAnimatedCameraName", Command {&Command_SetAnimatedCameraName, "None", {{ParamType::String}}}},
    {"SetAnimCamMulticontName", Command {&Command_SetAnimCamMulticontName, "None", {{ParamType::String}}}},
    {"SetCoinFee", Command {&Command_SetCoinFee, "None", {{ParamType::Int}}}},
    {"PutMFPlayerInCar", Command {&Command_PutMFPlayerInCar, "None", {{ParamType::Int}}}},
    {"StartCountdown", Command {&Command_StartCountdown, "None", {{ParamType::String, ParamType::String}}}},
    {"AddToCountdownSequence", Command {&Command_AddToCountdownSequence, "None", {{ParamType::String, ParamType::Int}}}},
    {"UseElapsedTime", Command {&Command_UseElapsedTime, "None", {{ParamType::Int}}}},
    {"SetRaceEnteryFee", Command {&Command_SetRaceEnteryFee, "None", {{ParamType::Int}}}},
    {"SetParTime", Command {&Command_SetParTime, "None", {{ParamType::Int}}}},
    {"SetCondMinHealth", Command {&Command_SetCondMinHealth, "None", {{ParamType::Float}}}},
    {"SetCondTargetVehicle", Command {&Command_SetCondTargetVehicle, "None", {{ParamType::String}}}},
    {"SetCondTime", Command {&Command_SetCondTime, "None", {{ParamType::Int}}}},
    {"AddBonusMission", Command {&Command_AddBonusMission, "None", {{ParamType::String}}}},
    {"AddTeleportDest",
     Command {&Command_AddTeleportDest,
              "Set a valid location for a teleport",
              {{ParamType::String, ParamType::Float, ParamType::Float, ParamType::Float, ParamType::String}}}},
    {"AddVehicleSelectInfo",
     Command {&Command_AddVehicleSelectInfo, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"SuppressDriver", Command {&Command_SuppressDriver, "help your goddamn self", {{ParamType::String}}}},
    {"SetBonusMissionDialoguePos", Command {&Command_SetBonusMissionDialoguePos,
                                            "None",
                                            {{ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetConversationCam",
     Command {&Command_SetConversationCam, "None", {{ParamType::Int, ParamType::String, ParamType::String}}}},
    {"ClearAmbientAnimations", Command {&Command_ClearAmbientAnimations, "None", {{ParamType::String}}}},
    {"AddAmbientNpcAnimation", Command {&Command_AddAmbientNpcAnimation, "None", {{ParamType::String, ParamType::String}}}},
    {"AddAmbientPcAnimation", Command {&Command_AddAmbientPcAnimation, "None", {{ParamType::String, ParamType::String}}}},
    {"SetCoinDrawable", Command {&Command_SetCoinDrawable, "None", {{ParamType::String}}}},
    {"AmbientAnimationRandomize", Command {&Command_AmbientAnimationRandomize, "None", {{ParamType::Int, ParamType::Int}}}},
    {"TurnGotoDialogOff", Command {&Command_TurnGotoDialogOff, "None", {{ParamType::Int}}}},
    {"SetCompletionDialog", Command {&Command_SetCompletionDialog, "None", {{ParamType::String, ParamType::String}}}},
    {"SetMissionResetPlayerOutCar",
     Command {&Command_SetMissionResetPlayerOutCar, "None", {{ParamType::String, ParamType::String}}}},
    {"SetMissionStartCameraName", Command {&Command_SetMissionStartCameraName, "None", {{ParamType::String}}}},
    {"SetMissionStartMulticontName", Command {&Command_SetMissionStartMulticontName, "None", {{ParamType::String}}}},
    {"SetInitialWalk", Command {&Command_SetInitialWalk, "Set locator to walk to on startup", {{ParamType::String}}}},
    {"SetDialoguePositions", Command {&Command_SetDialoguePositions,
                                      "None",
                                      {{ParamType::String, ParamType::String, ParamType::String, ParamType::Int}}}},
    {"ActivateVehicle",
     Command {&Command_ActivateVehicle, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetStageMusicAlwaysOn", Command {&Command_SetStageMusicAlwaysOn, "None", {{ParamType::Int}}}},
    {"SetNumValidFailureHints", Command {&Command_SetNumValidFailureHints, "None", {{ParamType::Int}}}},
    {"SetVehicleAIParams",
     Command {&Command_SetVehicleAIParams, "None", {{ParamType::String, ParamType::Int, ParamType::Int}}}},
    {"StageStartMusicEvent", Command {&Command_StageStartMusicEvent, "None", {{ParamType::String}}}},
    {"AllowMissionAbort", Command {&Command_AllowMissionAbort, "None", {{ParamType::String}}}},
    {"MustActionTrigger", Command {&Command_MustActionTrigger, "None", {{ParamType::Int}}}},
    {"SetStageAITargetCatchupParams",
     Command {&Command_SetStageAITargetCatchupParams, "None", {{ParamType::String, ParamType::Int, ParamType::Int}}}},
    {"SetFollowDistances", Command {&Command_SetFollowDistances, "None", {{ParamType::Int, ParamType::Int}}}},
    {"SetFadeOut", Command {&Command_SetFadeOut, "None", {{ParamType::Float}}}},
    {"StayInBlack", Command {&Command_StayInBlack, "None", {{ParamType::Int}}}},
    {"AddStageCharacter",
     Command {&Command_AddStageCharacter,
              "None",
              {{ParamType::String, ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetDurationTime", Command {&Command_SetDurationTime, "None", {{ParamType::Float}}}},
    {"SetFMVInfo", Command {&Command_SetFMVInfo, "None", {{ParamType::String, ParamType::String}}}},
    {"SetForcedCar", Command {&Command_SetForcedCar, "None", {{ParamType::Int}}}},
    {"SwapInDefaultCar", Command {&Command_SwapInDefaultCar, "None", {{ParamType::Int}}}},
    {"SetSwapDefaultCarLocator", Command {&Command_SetSwapDefaultCarLocator, "None", {{ParamType::String}}}},
    {"SetSwapForcedCarLocator", Command {&Command_SetSwapForcedCarLocator, "None", {{ParamType::String}}}},
    {"SetSwapPlayerLocator", Command {&Command_SetSwapPlayerLocator, "None", {{ParamType::String}}}},
    {"StreetRacePropsLoad", Command {&Command_StreetRacePropsLoad, "None", {{ParamType::String}}}},
    {"StreetRacePropsUnload", Command {&Command_StreetRacePropsUnload, "None", {{ParamType::String}}}},
    {"SetStageAIRaceCatchupParams",
     Command {&Command_SetStageAIRaceCatchupParams,
              "None",
              {{ParamType::String, ParamType::Int, ParamType::Float, ParamType::Float, ParamType::Float}}}},
    {"DisableHitAndRun", Command {&Command_DisableHitAndRun, "None", {{ParamType::Int}}}},
    {"NoTrafficForStage", Command {&Command_NoTrafficForStage, "None", {{ParamType::Int}}}},
    {"SetConditionPosition", Command {&Command_SetConditionPosition, "None", {{ParamType::Int}}}},
    {"AddSafeZone", Command {&Command_AddSafeZone, "None", {{ParamType::String, ParamType::Int}}}},
    {"AddGagBinding", Command {&Command_AddGagBinding,
                               "AddGagBinding(InteriorName, GagFileName, CycleMode, Weight, SoundResourceName);",
                               {{ParamType::String, ParamType::String, ParamType::String, ParamType::Int, ParamType::String}}}},
    {"SetPostLevelFMV", Command {&Command_SetPostLevelFMV, "None", {{ParamType::String}}}},
    {"SetHitNRun", Command {&Command_SetHitNRun, "None", {{ParamType::Int}}}},
    {"SetObjDistance", Command {&Command_SetObjDistance, "None", {{ParamType::Int}}}},
    {"SetMusicState", Command {&Command_SetMusicState, "None", {{ParamType::String, ParamType::String}}}},
    {"SetIrisWipe", Command {&Command_SetIrisWipe, "None", {{ParamType::Float}}}},
    {"RemoveDriver", Command {&Command_RemoveDriver, "None", {{ParamType::String}}}},
    {"RemoveNPC", Command {&Command_RemoveNPC, "None", {{ParamType::String}}}},
    {"AddDriver", Command {&Command_AddDriver, "None", {{ParamType::String, ParamType::String}}}},
    {"SetCharacterToHide", Command {&Command_SetCharacterToHide, "None", {{ParamType::String}}}},
    {"SetLevelOver", Command {&Command_SetLevelOver, "None", {{ParamType::Int}}}},
    {"GagCheckCollCards",
     Command {&Command_GagCheckCollCards,
              "None",
              {{ParamType::String, ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"GagCheckMovie",
     Command {&Command_GagCheckMovie, "None", {{ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"GagSetSoundLoadDistances", Command {&Command_GagSetSoundLoadDistances, "None", {{ParamType::Int, ParamType::Int}}}},
    {"BindCollectibleTo", Command {&Command_BindCollectibleTo, "None", {{ParamType::Int, ParamType::Int}}}},
    {"AddShield", Command {&Command_AddShield, "None", {{ParamType::String, ParamType::String}}}},
    {"SetStatepropShadow", Command {&Command_SetStatepropShadow, "None", {{ParamType::String, ParamType::String}}}},
    {"AddFlyingActorByLocator", Command {&Command_AddFlyingActorByLocator,
                                         "None",
                                         {{ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"AddCollectibleStateProp",
     Command {&Command_AddCollectibleStateProp, "None", {{ParamType::String, ParamType::String, ParamType::Int}}}},
    {"SetPickupTarget", Command {&Command_SetPickupTarget, "None", {{ParamType::String}}}},
    {"SetObjTargetBoss", Command {&Command_SetObjTargetBoss, "None", {{ParamType::String}}}},
    {"AllowRockOut", Command {&Command_AllowRockOut, "None", {{ParamType::Int}}}},
    {"ShowHUD", Command {&Command_ShowHUD, "None", {{ParamType::String}}}},
    {"SetGameOver", Command {&Command_SetGameOver, "None", {{ParamType::Int}}}},
    {"GoToPsScreenWhenDone", Command {&Command_GoToPsScreenWhenDone, "None", {{ParamType::Int}}}},
    {"SetMass", Command {&Command_SetMass, "help your goddamn self", {{ParamType::Float}}}},
    {"SetGasScale", Command {&Command_SetGasScale, "help your goddamn self", {{ParamType::Float}}}},
    {"SetSlipGasScale", Command {&Command_SetSlipGasScale, "help your goddamn self", {{ParamType::Float}}}},
    {"SetBrakeScale", Command {&Command_SetBrakeScale, "help your goddamn self", {{ParamType::Float}}}},
    {"SetTopSpeedKmh", Command {&Command_SetTopSpeedKmh, "help your goddamn self", {{ParamType::Float}}}},
    {"SetMaxWheelTurnAngle", Command {&Command_SetMaxWheelTurnAngle, "help your goddamn self", {{ParamType::Float}}}},
    {"SetHighSpeedSteeringDrop", Command {&Command_SetHighSpeedSteeringDrop, "help your goddamn self", {{ParamType::Float}}}},
    {"SetTireGrip", Command {&Command_SetTireGrip, "help your goddamn self", {{ParamType::Float}}}},
    {"SetNormalSteering", Command {&Command_SetNormalSteering, "help your goddamn self", {{ParamType::Float}}}},
    {"SetSlipSteering", Command {&Command_SetSlipSteering, "help your goddamn self", {{ParamType::Float}}}},
    {"SetEBrakeEffect", Command {&Command_SetEBrakeEffect, "help your goddamn self", {{ParamType::Float}}}},
    {"SetSlipSteeringNoEBrake", Command {&Command_SetSlipSteeringNoEBrake, "help your goddamn self", {{ParamType::Float}}}},
    {"SetSlipEffectNoEBrake", Command {&Command_SetSlipEffectNoEBrake, "help your goddamn self", {{ParamType::Float}}}},
    {"SetCMOffsetX", Command {&Command_SetCMOffsetX, "help your goddamn self", {{ParamType::Float}}}},
    {"SetCMOffsetY", Command {&Command_SetCMOffsetY, "help your goddamn self", {{ParamType::Float}}}},
    {"SetCMOffsetZ", Command {&Command_SetCMOffsetZ, "help your goddamn self", {{ParamType::Float}}}},
    {"SetSuspensionLimit", Command {&Command_SetSuspensionLimit, "help your goddamn self", {{ParamType::Float}}}},
    {"SetSpringK", Command {&Command_SetSpringK, "help your goddamn self", {{ParamType::Float}}}},
    {"SetDamperC", Command {&Command_SetDamperC, "help your goddamn self", {{ParamType::Float}}}},
    {"SetSuspensionYOffset", Command {&Command_SetSuspensionYOffset, "help your goddamn self", {{ParamType::Float}}}},
    {"SetHitPoints", Command {&Command_SetHitPoints, "help your goddamn self", {{ParamType::Float}}}},
    {"SetBurnoutRange", Command {&Command_SetBurnoutRange, "help your goddamn self", {{ParamType::Float}}}},
    {"SetMaxSpeedBurstTime", Command {&Command_SetMaxSpeedBurstTime, "help your goddamn self", {{ParamType::Float}}}},
    {"SetDonutTorque", Command {&Command_SetDonutTorque, "help your goddamn self", {{ParamType::Float}}}},
    {"SetWeebleOffset", Command {&Command_SetWeebleOffset, "help your goddamn self", {{ParamType::Float}}}},
    {"SetWheelieRange", Command {&Command_SetWheelieRange, "help your goddamn self", {{ParamType::Float}}}},
    {"SetWheelieOffsetY", Command {&Command_SetWheelieOffsetY, "help your goddamn self", {{ParamType::Float}}}},
    {"SetWheelieOffsetZ", Command {&Command_SetWheelieOffsetZ, "help your goddamn self", {{ParamType::Float}}}},
    {"SetShadowAdjustments", Command {&Command_SetShadowAdjustments,
                                      "Move the shadow points around",
                                      {{ParamType::Float, ParamType::Float, ParamType::Float, ParamType::Float,
                                        ParamType::Float, ParamType::Float, ParamType::Float, ParamType::Float}}}},
    {"SetCharactersVisible", Command {&Command_SetCharactersVisible, "help your goddamn self", {{ParamType::Int}}}},
    {"SetIrisTransition", Command {&Command_SetIrisTransition, "help your goddamn self", {{ParamType::Int}}}},
    {"SetCharacterScale", Command {&Command_SetCharacterScale, "help your goddamn self", {{ParamType::Float}}}},
    {"SetGamblingOdds", Command {&Command_SetGamblingOdds, "Set Gambling Odds", {{ParamType::Float}}}},
    {"SetDriver", Command {&Command_SetDriver, "help your goddamn self", {{ParamType::String}}}},
    {"SetHasDoors", Command {&Command_SetHasDoors, "help your goddamn self", {{ParamType::Int}}}},
    {"SetShininess", Command {&Command_SetShininess, "Set the environmental reflection 0 to 1", {{ParamType::Float}}}},
    {"SetHighRoof", Command {&Command_SetHighRoof, "help your goddamn self", {{ParamType::Int}}}},
    {"SetHighSpeedGasScale", Command {&Command_SetHighSpeedGasScale, "help your goddamn self", {{ParamType::Float}}}},
    {"SetGasScaleSpeedThreshold", Command {&Command_SetGasScaleSpeedThreshold, "help your goddamn self", {{ParamType::Float}}}},
    {"SetAllowSeatSlide", Command {&Command_SetAllowSeatSlide, "help your goddamn self", {{ParamType::Int}}}},
    {"ClearVehicleSelectInfo",
     Command {&Command_ClearVehicleSelectInfo, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"AddFlyingActor",
     Command {&Command_AddFlyingActor,
              "None",
              {{ParamType::String, ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetCollisionAttributes", Command {&Command_SetCollisionAttributes,
                                        "None",
                                        {{ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"AddSpawnPoint", Command {&Command_AddSpawnPoint,
                               "None",
                               {{ParamType::String, ParamType::String, ParamType::String, ParamType::String, ParamType::String,
                                 ParamType::String, ParamType::String, ParamType::String}}}},
    {"GagSetWeight", Command {&Command_GagSetWeight, "None", {{ParamType::String}}}},
    {"GagSetLoadDistances", Command {&Command_GagSetLoadDistances, "None", {{ParamType::String, ParamType::String}}}},
    {"SetTotalWasps", Command {&Command_SetTotalWasps, "None", {{ParamType::String, ParamType::String}}}},
    {"AddGlobalProp", Command {&Command_AddGlobalProp, "None", {{ParamType::String}}}},
    {"EnableHitAndRun", Command {&Command_EnableHitAndRun, "None", {{ParamType::String}}}},
    {"SetHitAndRunMeter", Command {&Command_SetHitAndRunMeter, "None", {{ParamType::String}}}},
    {"SetChaseSpawnRate", Command {&Command_SetChaseSpawnRate, "None", {{ParamType::String, ParamType::String}}}},
    {"KillAllChaseAI", Command {&Command_KillAllChaseAI, "None", {{ParamType::String}}}},
    {"ResetHitAndRun", Command {&Command_ResetHitAndRun, "None", {{ParamType::String}}}},
    {"SetHitAndRunDecayInterior", Command {&Command_SetHitAndRunDecayInterior, "None", {{ParamType::String}}}},
    {"SetMissionNameIndex", Command {&Command_SetMissionNameIndex, "None", {{ParamType::String}}}},
    {"AddBonusObjective", Command {&Command_AddBonusObjective, "None", {{ParamType::String, ParamType::String}}}},
    {"AttachStatePropCollectible",
     Command {&Command_AttachStatePropCollectible, "None", {{ParamType::String, ParamType::String}}}},
    {"MoveStageVehicle",
     Command {&Command_MoveStageVehicle, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetStageCamera", Command {&Command_SetStageCamera, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetBonusMissionStart", Command {&Command_SetBonusMissionStart, "None", {{ParamType::String}}}},
    {"PlacePlayerAtLocatorName", Command {&Command_PlacePlayerAtLocatorName, "None", {{ParamType::String}}}},
    {"msPlacePlayerCarAtLocatorName", Command {&Command_msPlacePlayerCarAtLocatorName, "None", {{ParamType::String}}}},
    {"ClearTrafficForStage", Command {&Command_ClearTrafficForStage, "None", {{ParamType::String}}}},
    {"SetStageAIEvadeCatchupParams",
     Command {&Command_SetStageAIEvadeCatchupParams, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"AllowUserDump", Command {&Command_AllowUserDump, "None", {{ParamType::String}}}},
    {"SetVehicleToLoad",
     Command {&Command_SetVehicleToLoad, "None", {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetConversationCamName", Command {&Command_SetConversationCamName, "x", {{ParamType::String}}}},
    {"SetConversationCamPcName", Command {&Command_SetConversationCamPcName, "None", {{ParamType::String}}}},
    {"SetConversationCamNpcName", Command {&Command_SetConversationCamNpcName, "None", {{ParamType::String}}}},
    {"SetConversationCamDistance",
     Command {&Command_SetConversationCamDistance, "None", {{ParamType::String, ParamType::String}}}},
    {"CharacterIsChild", Command {&Command_CharacterIsChild, "None", {{ParamType::String}}}},
    {"SetCarStartCamera", Command {&Command_SetCarStartCamera, "None", {{ParamType::String}}}},
    {"SetPlayerCarName", Command {&Command_SetPlayerCarName, "None", {{ParamType::String, ParamType::String}}}},
    {"SetRespawnRate", Command {&Command_SetRespawnRate, "None", {{ParamType::String, ParamType::String}}}},
    {"ActivateTrigger", Command {&Command_ActivateTrigger, "None", {{ParamType::String}}}},
    {"DeactivateTrigger", Command {&Command_DeactivateTrigger, "None", {{ParamType::String}}}},
    {"CreateAnimPhysObject", Command {&Command_CreateAnimPhysObject, "None", {{ParamType::String, ParamType::String}}}},
    {"CreateActionEventTrigger",
     Command {&Command_CreateActionEventTrigger,
              "None",
              {{ParamType::String, ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"LinkActionToObjectJoint",
     Command {&Command_LinkActionToObjectJoint,
              "None",
              {{ParamType::String, ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"LinkActionToObject",
     Command {&Command_LinkActionToObject,
              "None",
              {{ParamType::String, ParamType::String, ParamType::String, ParamType::String, ParamType::String}}}},
    {"SetCharacterPosition", Command {&Command_SetCharacterPosition,
                                      "Sets the character position",
                                      {{ParamType::String, ParamType::String, ParamType::String}}}},
    {"ResetCharacter",
     Command {&Command_ResetCharacter, "Sets the character to the named locator", {{ParamType::String, ParamType::String}}}},
};
} // namespace Donut
